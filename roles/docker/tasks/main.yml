---
# roles/docker/tasks/main.yml
# Docker installation with security hardening for SummitEthic

- name: Install Docker prerequisites
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - python3-pip
      - python3-setuptools
    state: present
    update_cache: true

- name: Add Docker GPG key
  ansible.builtin.get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/keyrings/docker.asc
    mode: "0644"
    checksum: sha256:1500c1f56fa9e26b9b8f42452a553675796ade0807cdce11975eb98170b3a570

- name: Add Docker repository
  ansible.builtin.apt_repository:
    repo: >
      deb [arch={{ ansible_architecture }} signed-by=/etc/apt/keyrings/docker.asc]
      https://download.docker.com/linux/ubuntu
      {{ ansible_distribution_release }} stable
    state: present
    filename: docker

- name: Install Docker Engine
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present
    update_cache: true

- name: Install Docker SDK for Python
  ansible.builtin.pip:
    name:
      - docker
      - docker-compose
    state: present

# Security Hardening
- name: Create docker group
  ansible.builtin.group:
    name: docker
    state: present

- name: Add ansible user to docker group
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: docker
    append: true

- name: Configure Docker daemon with security options
  ansible.builtin.template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: "0644"
  notify: Restart Docker

- name: Create Docker service override directory
  ansible.builtin.file:
    path: /etc/systemd/system/docker.service.d
    state: directory
    mode: "0755"

- name: Configure Docker service security overrides
  ansible.builtin.template:
    src: docker-override.conf.j2
    dest: /etc/systemd/system/docker.service.d/override.conf
    owner: root
    group: root
    mode: "0644"
  notify: Restart Docker

- name: Enable and start Docker
  ansible.builtin.systemd:
    name: docker
    enabled: true
    state: started
    daemon_reload: true

# Docker Security Benchmarks
- name: Ensure Docker socket permissions are restricted
  ansible.builtin.file:
    path: /var/run/docker.sock
    owner: root
    group: docker
    mode: "0660"

- name: Enable Docker Content Trust for image verification
  ansible.builtin.lineinfile:
    path: /etc/environment
    line: "DOCKER_CONTENT_TRUST=1"
    create: true
    mode: "0644"

- name: Create Docker audit rules
  ansible.builtin.template:
    src: docker-audit.rules.j2
    dest: /etc/audit/rules.d/docker.rules
    owner: root
    group: root
    mode: "0640"
  notify: Restart Auditd

- name: Configure Docker log rotation
  ansible.builtin.template:
    src: docker-logrotate.j2
    dest: /etc/logrotate.d/docker
    owner: root
    group: root
    mode: "0644"

- name: Run Docker CIS benchmark check
  ansible.builtin.shell: |
    docker run --rm --net host --pid host --userns host --cap-add audit_control \
      -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
      -v /etc:/etc:ro \
      -v /usr/bin/docker-containerd:/usr/bin/docker-containerd:ro \
      -v /usr/bin/docker-runc:/usr/bin/docker-runc:ro \
      -v /usr/lib/systemd:/usr/lib/systemd:ro \
      -v /var/lib:/var/lib:ro \
      -v /var/run/docker.sock:/var/run/docker.sock:ro \
      --label docker_bench_security \
      docker/docker-bench-security
  register: docker_bench_output
  changed_when: false
  failed_when: false

- name: Save Docker security benchmark results
  ansible.builtin.copy:
    content: "{{ docker_bench_output.stdout }}"
    dest: "/var/log/docker-bench-security-{{ ansible_date_time.date }}.log"
    owner: root
    group: root
    mode: "0640"
