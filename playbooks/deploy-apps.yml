---
# playbooks/deploy-apps.yml
# Deploy all SummitEthic applications with ethical considerations

- name: Deploy SummitEthic Applications
  hosts: webservers
  become: true
  gather_facts: true
  vars:
    deployment_timestamp: "{{ ansible_date_time.iso8601 }}"
    deployment_id: "{{ ansible_date_time.epoch }}"

  pre_tasks:
    - name: Verify prerequisites
      assert:
        that:
          - docker_daemon_running | default(false)
          - traefik_running | default(false)
          - postgres_running | default(false)
        fail_msg: "Prerequisites not met. Ensure Docker, Traefik, and PostgreSQL are running."

    - name: Check Docker daemon status
      systemd:
        name: docker
        state: started
      register: docker_status

    - name: Set Docker daemon fact
      set_fact:
        docker_daemon_running: "{{ docker_status.status.ActiveState == 'active' }}"

    - name: Check Traefik status
      docker_container_info:
        name: traefik
      register: traefik_info
      failed_when: false

    - name: Set Traefik fact
      set_fact:
        traefik_running: "{{ traefik_info.exists | default(false) and traefik_info.container.State.Running | default(false) }}"

    - name: Create deployment record
      lineinfile:
        path: /var/log/summitethic/deployments.log
        line: |
          ===== DEPLOYMENT START =====
          ID: {{ deployment_id }}
          Timestamp: {{ deployment_timestamp }}
          Deployed by: {{ deploy_user | default(ansible_user_id) }}
          Reason: {{ deploy_reason | default('Scheduled deployment') }}
          Services: {{ services | selectattr('enabled', 'equalto', true) | map(attribute='name') | list | join(', ') }}
        create: true
        mode: "0640"

  tasks:
    # Phase 1: Deploy GitLab
    - name: Deploy GitLab for source control
      include_role:
        name: gitlab
      when: "'gitlab' in services | selectattr('enabled', 'equalto', true) | map(attribute='name') | list"
      tags:
        - gitlab
        - vcs

    # Phase 2: Deploy Mailcow
    - name: Deploy Mailcow for email services
      include_role:
        name: mailcow
      when: "'mailcow' in services | selectattr('enabled', 'equalto', true) | map(attribute='name') | list"
      tags:
        - mailcow
        - email

    # Phase 3: Deploy Mautic
    - name: Deploy Mautic for marketing automation
      include_role:
        name: mautic
      when: "'mautic' in services | selectattr('enabled', 'equalto', true) | map(attribute='name') | list"
      tags:
        - mautic
        - marketing

    # Phase 4: Deploy WordPress
    - name: Deploy WordPress for company website
      block:
        - name: Create WordPress directories
          file:
            path: "{{ item }}"
            state: directory
            owner: www-data
            group: docker
            mode: "0755"
          loop:
            - /opt/summitethic/apps/wordpress
            - /opt/summitethic/apps/wordpress/wp-content

        - name: Deploy WordPress docker-compose
          template:
            src: ../templates/docker-compose.wordpress.yml.j2
            dest: /opt/summitethic/apps/wordpress/docker-compose.yml
            owner: root
            group: docker
            mode: "0640"

        - name: Start WordPress
          docker_compose:
            project_src: /opt/summitethic/apps/wordpress
            state: present
            pull: true

      when: "'wordpress' in services | selectattr('enabled', 'equalto', true) | map(attribute='name') | list"
      tags:
        - wordpress
        - website

    # Phase 5: Deploy Matomo
    - name: Deploy Matomo for analytics
      block:
        - name: Create Matomo directories
          file:
            path: "{{ item }}"
            state: directory
            owner: www-data
            group: docker
            mode: "0755"
          loop:
            - /opt/summitethic/apps/matomo
            - /opt/summitethic/apps/matomo/config
            - /opt/summitethic/apps/matomo/logs

        - name: Deploy Matomo docker-compose
          template:
            src: ../templates/docker-compose.matomo.yml.j2
            dest: /opt/summitethic/apps/matomo/docker-compose.yml
            owner: root
            group: docker
            mode: "0640"

        - name: Start Matomo
          docker_compose:
            project_src: /opt/summitethic/apps/matomo
            state: present
            pull: true

      when: "'matomo' in services | selectattr('enabled', 'equalto', true) | map(attribute='name') | list"
      tags:
        - matomo
        - analytics

    # Phase 6: Configure services for Traefik
    - name: Configure all services for Traefik routing
      include_tasks: tasks/configure-traefik-labels.yml
      loop: "{{ services | selectattr('enabled', 'equalto', true) | list }}"
      loop_control:
        loop_var: service
      tags:
        - traefik
        - routing

    # Phase 7: Health checks
    - name: Perform health checks on deployed services
      uri:
        url: "https://{{ item.subdomain }}.{{ domain_name }}/health"
        status_code:
          - 200
          - 301
          - 302
        timeout: 30
        validate_certs: true
      loop: "{{ services | selectattr('enabled', 'equalto', true) | list }}"
      when: item.subdomain is defined
      register: health_checks
      ignore_errors: true
      tags:
        - healthcheck

    # Phase 8: Configure backups
    - name: Configure automated backups for all services
      template:
        src: ../templates/backup-cron.j2
        dest: /etc/cron.d/summitethic-backups
        owner: root
        group: root
        mode: "0644"
      tags:
        - backup

    # Phase 9: Security scan
    - name: Run security scan on deployed services
      shell: |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy image \
          --severity HIGH,CRITICAL \
          --format json \
          --output /tmp/security-scan-{{ deployment_id }}.json \
          $(docker ps --format "{{.Image}}" | grep -E "gitlab|mailcow|mautic|wordpress|matomo")
      register: security_scan
      ignore_errors: true
      tags:
        - security
        - scan

  post_tasks:
    - name: Generate deployment report
      template:
        src: ../templates/deployment-report.md.j2
        dest: "/opt/summitethic/reports/deployment-{{ deployment_id }}.md"
        mode: "0640"
      vars:
        deployment_status: "{{ 'SUCCESS' if health_checks.failed == 0 else 'PARTIAL' }}"
        deployed_services: "{{ services | selectattr('enabled', 'equalto', true) | list }}"
        health_check_results: "{{ health_checks.results | default([]) }}"

    - name: Log deployment completion
      lineinfile:
        path: /var/log/summitethic/deployments.log
        line: |
          ===== DEPLOYMENT COMPLETE =====
          ID: {{ deployment_id }}
          Timestamp: {{ ansible_date_time.iso8601 }}
          Status: {{ 'SUCCESS' if health_checks.failed == 0 else 'COMPLETED WITH WARNINGS' }}
          Duration: {{ (ansible_date_time.epoch | int) - (deployment_id | int) }} seconds

    - name: Send deployment notification
      mail:
        to: "{{ notification_channels | selectattr('type', 'equalto', 'email') | map(attribute='smtp_user') | first | default('admin@summitethic.com') }}"
        subject: "[SummitEthic] Deployment {{ deployment_status }} - {{ deployment_id }}"
        body: |
          Deployment completed on {{ ansible_date_time.iso8601 }}

          Status: {{ deployment_status }}
          Services deployed: {{ deployed_services | map(attribute='name') | join(', ') }}

          Access URLs:
          {% for service in deployed_services %}
          {% if service.subdomain is defined %}
          - {{ service.name | title }}: https://{{ service.subdomain }}.{{ domain_name }}
          {% endif %}
          {% endfor %}

          Please check the full report at: /opt/summitethic/reports/deployment-{{ deployment_id }}.md
      when: notification_channels is defined

    - name: Display deployment summary
      debug:
        msg: |
          ========================================
          Deployment Summary
          ========================================
          Deployment ID: {{ deployment_id }}
          Status: {{ deployment_status }}

          Deployed Services:
          {% for service in deployed_services %}
          - {{ service.name }}: https://{{ service.subdomain | default(service.name) }}.{{ domain_name }}
          {% endfor %}

          Next Steps:
          1. Verify all services are accessible
          2. Check monitoring dashboards
          3. Review security scan results
          4. Configure DNS records if needed
          ========================================

  handlers:
    - name: reload nginx
      service:
        name: nginx
        state: reloaded

    - name: restart services
      docker_compose:
        project_src: "/opt/summitethic/apps/{{ item }}"
        restarted: true
      loop: "{{ services | selectattr('enabled', 'equalto', true) | map(attribute='name') | list }}"
