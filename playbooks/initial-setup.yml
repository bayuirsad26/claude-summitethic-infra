---
# playbooks/initial-setup.yml
# Initial VPS setup with security hardening and ethical considerations
# Principle: Security by default, transparency in configuration

- name: Initial Server Setup for SummitEthic Infrastructure
  hosts: all
  become: true
  gather_facts: true
  vars_prompt:
    - name: ansible_user_password
      prompt: "Enter password for ansible user"
      private: true
      encrypt: sha512_crypt
      confirm: true
      salt_size: 7

  tasks:
    # Ethical checkpoint: Document all changes
    - name: Create audit log directory
      ansible.builtin.file:
        path: /var/log/summitethic
        state: directory
        owner: root
        group: adm
        mode: "0750"

    - name: Initialize infrastructure audit log
      ansible.builtin.lineinfile:
        path: /var/log/summitethic/infrastructure-audit.log
        line: |
          ===== INFRASTRUCTURE INITIALIZATION =====
          Date: {{ ansible_date_time.iso8601 }}
          Initiated by: {{ lookup('env', 'USER') }}
          Target Host: {{ inventory_hostname }}
          Ansible Version: {{ ansible_version.full }}
          Ethical Principles Applied: Security, Transparency, Privacy
        create: true
        mode: "0640"
        owner: root
        group: adm

    # System Updates
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600

    - name: Upgrade all packages to latest version
      ansible.builtin.apt:
        upgrade: dist
        autoremove: true
        autoclean: true
      register: apt_upgrade

    - name: Log system upgrade
      ansible.builtin.lineinfile:
        path: /var/log/summitethic/infrastructure-audit.log
        line: "{{ ansible_date_time.iso8601 }} - System packages upgraded: {{ apt_upgrade.changed }}"

    # Create administrative user
    - name: Create ansible administrative user
      ansible.builtin.user:
        name: ansible
        password: "{{ ansible_user_password }}"
        groups: sudo
        shell: /bin/bash
        home: /home/ansible
        createhome: true
        state: present

    - name: Create .ssh directory for ansible user
      ansible.builtin.file:
        path: /home/ansible/.ssh
        state: directory
        owner: ansible
        group: ansible
        mode: "0700"

    - name: Add SSH public key for ansible user
      ansible.posix.authorized_key:
        user: ansible
        key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
        state: present
        exclusive: true

    - name: Configure sudoers for ansible user
      ansible.builtin.lineinfile:
        path: /etc/sudoers.d/ansible
        line: "ansible ALL=(ALL) NOPASSWD:ALL"
        create: true
        mode: "0440"
        validate: "visudo -cf %s"

    # Essential packages
    - name: Install essential packages
      ansible.builtin.apt:
        name:
          - git
          - vim
          - htop
          - curl
          - wget
          - unzip
          - software-properties-common
          - python3-pip
          - python3-setuptools
          - python3-dev
          - build-essential
          - net-tools
          - jq
          - tree
          - ncdu
          - iotop
          - sysstat
          - mtr-tiny
          - dnsutils
          - tcpdump
          - nmap
          - lsof
          - strace
          - ca-certificates
          - gnupg
          - lsb-release
        state: present

    # Configure timezone
    - name: Set timezone to Asia/Jakarta
      community.general.timezone:
        name: Asia/Jakarta

    # Configure hostname
    - name: Set hostname
      ansible.builtin.hostname:
        name: "{{ inventory_hostname_short }}"

    - name: Update /etc/hosts
      ansible.builtin.lineinfile:
        path: /etc/hosts
        regexp: "^127\\.0\\.1\\.1"
        line: "127.0.1.1 {{ inventory_hostname }} {{ inventory_hostname_short }}"
        state: present

    # Configure swap (for VPS with limited RAM)
    - name: Check if swap file exists
      ansible.builtin.stat:
        path: /swapfile
      register: swap_file_check

    - name: Create swap file
      ansible.builtin.command: dd if=/dev/zero of=/swapfile bs=1M count=2048
      when: not swap_file_check.stat.exists

    - name: Set swap file permissions
      ansible.builtin.file:
        path: /swapfile
        owner: root
        group: root
        mode: "0600"
      when: not swap_file_check.stat.exists

    - name: Make swap file
      ansible.builtin.command: mkswap /swapfile
      when: not swap_file_check.stat.exists

    - name: Enable swap file
      ansible.builtin.command: swapon /swapfile
      when: not swap_file_check.stat.exists

    - name: Add swap file to fstab
      ansible.builtin.lineinfile:
        path: /etc/fstab
        line: "/swapfile none swap sw 0 0"
        state: present

    # Configure swappiness for better performance
    - name: Set swappiness value
      ansible.posix.sysctl:
        name: vm.swappiness
        value: "10"
        state: present
        reload: true

    # Basic security hardening
    - name: Disable root SSH login
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?PermitRootLogin"
        line: "PermitRootLogin no"
        state: present
      notify: Restart sshd

    - name: Disable password authentication
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?PasswordAuthentication"
        line: "PasswordAuthentication no"
        state: present
      notify: Restart sshd

    - name: Configure SSH to use only strong ciphers
      ansible.builtin.blockinfile:
        path: /etc/ssh/sshd_config
        block: |
          # Strong ciphers only
          Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com
          MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com
          KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org
        marker: "# {mark} ANSIBLE MANAGED BLOCK - Strong Ciphers"
      notify: Restart sshd

    # Configure automatic security updates
    - name: Install unattended-upgrades
      ansible.builtin.apt:
        name: unattended-upgrades
        state: present

    - name: Configure unattended-upgrades
      ansible.builtin.template:
        src: ../templates/50unattended-upgrades.j2
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
        owner: root
        group: root
        mode: "0644"

    - name: Enable automatic security updates
      ansible.builtin.template:
        src: ../templates/20auto-upgrades.j2
        dest: /etc/apt/apt.conf.d/20auto-upgrades
        owner: root
        group: root
        mode: "0644"

    # Configure NTP for time synchronization
    - name: Install chrony for NTP
      ansible.builtin.apt:
        name: chrony
        state: present

    - name: Configure chrony
      ansible.builtin.lineinfile:
        path: /etc/chrony/chrony.conf
        line: "server {{ item }} iburst"
        state: present
      loop:
        - 0.id.pool.ntp.org
        - 1.id.pool.ntp.org
        - 2.id.pool.ntp.org
        - 3.id.pool.ntp.org
      notify: Restart chrony

    # Create directory structure
    - name: Create SummitEthic directory structure
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: ansible
        group: docker
        mode: "0755"
      loop:
        - /opt/summitethic
        - /opt/summitethic/apps
        - /opt/summitethic/data
        - /opt/summitethic/backups
        - /opt/summitethic/configs
        - /opt/summitethic/logs
        - /opt/summitethic/scripts
        - /opt/summitethic/docs

    # Configure MOTD with ethical message
    - name: Create custom MOTD
      ansible.builtin.template:
        src: ../templates/motd.j2
        dest: /etc/motd
        owner: root
        group: root
        mode: "0644"

    # Configure bash aliases for convenience
    - name: Add useful bash aliases
      ansible.builtin.blockinfile:
        path: /home/ansible/.bashrc
        block: |
          # SummitEthic aliases
          alias ll='ls -alF'
          alias dc='docker-compose'
          alias dps='docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"'
          alias dlogs='docker logs -f'
          alias dexec='docker exec -it'
          alias audit-log='sudo tail -f /var/log/summitethic/infrastructure-audit.log'
          alias check-services='systemctl status docker traefik'
        marker: "# {mark} ANSIBLE MANAGED BLOCK - Aliases"
        owner: ansible
        group: ansible

    # Final audit log entry
    - name: Log successful initial setup
      ansible.builtin.lineinfile:
        path: /var/log/summitethic/infrastructure-audit.log
        line: |
          {{ ansible_date_time.iso8601 }} - Initial setup completed successfully
          - Administrative user created: ansible
          - SSH hardened: Key-only authentication
          - Essential packages installed
          - Swap configured: 2GB
          - Automatic security updates enabled
          - Directory structure created
          - Next step: Run security hardening playbook

    - name: Display completion message
      ansible.builtin.debug:
        msg: |
          ========================================
          Initial setup completed successfully!

          Server: {{ inventory_hostname }}
          Admin user: ansible

          Security measures applied:
          - SSH key-only authentication
          - Root login disabled
          - Strong SSH ciphers enforced
          - Automatic security updates enabled

          Next steps:
          1. Test SSH access with ansible user
          2. Run security hardening playbook
          3. Install Docker and services
          ========================================

  handlers:
    - name: Restart sshd
      ansible.builtin.service:
        name: ssh
        state: restarted

    - name: Restart chrony
      ansible.builtin.service:
        name: chrony
        state: restarted
